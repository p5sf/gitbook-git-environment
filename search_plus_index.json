{"./":{"url":"./","title":"入门","keywords":"","body":"入门 [ ] 脚本安装JDK [ ] MySQL 集群和主从 [ ] Redis 集群和哨兵 初始化配置Linux 环境，安装编程基础软件以及配置，如果不想购买云服务器，可以使用Vmware Workstation 搭建 Linux环境学习测试，并下载Xshell 工具进行远程连接使用 Linux 环境搭建主要有三种方式 直接安装在物理机上. 但是由于 Linux 桌面使用起来非常不友好, 不推荐. 使用虚拟机软件, 将 Linux 搭建在虚拟机上，主要用于测试学习，但比较臃肿不方便 使用云服务器, 可以直接在 腾讯云或华为云等服务器厂商处直接购买一个云服务器，也是开发常见的方式 如果想搭建开发编程环境，需要提前安装如下 安装虚拟机 Vmware 虚拟机添加centos 镜像 进行网络配置 安装远程链接 xshell 虚拟机 下载虚拟机 Vmware Workstation 下载镜像 安装Linux环境 虚拟机安装之后，还没安装操作系统，这时需要先下载 Linux的发行版本，其中部分较为主流的 Linux 发行版如下，可以随意挑选一个 Debian Ubuntu Fedora Arch Linux) Elementary OS Deepin Gentoo Linux 镜像下载地址 网易开源镜像站:http://mirrors.163.com/ 阿里云官方镜像站:http://mirrors.aliyun.com Linux发行版下载:https://linux.cn/article-4130-1.html 网络环境 配置网络环境：修改网卡配置文件 vi /etc/sysconfig/network-scripts/ifcfg-ens33 更改配置：注意网关必须处于同一网段 BOOTPROTO=\"static\" ONBOOT=\"yes\" IPADDR=192.168.44.180 DNS1=114.114.114.114 NETMASK=255.255.255.0 GATEWAY=192.168.44.2 //使用静态IP无法自动自动解析域名,需要修改一个resolv.conf文件，加上以下域名服务器解析地址 //或者直接添加DNS1=114.114.114.1 14 vim /etc/resolv.conf nameserver 114.114.114.114 nameserver 8.8.8.8 远程链接 安装 Xshell XShell 是一种流行且简单的网络程序，可以在Windows界面下来访问远端不同系统下的服务器，从而达到远程控制终端的目的 访问Xshell 官网，填写姓名和邮箱即可获取下载地址 安装脚本 Linux 环境一键安装常用的环境配置，不用一个个安装命令，直接运行脚本自动安装环境 将软件包放在 /home/pack 目录下，再运行脚本 sh build.sh https://github.com/zxc2305/linux https://github.com/JeramTough/LinuxWebEnv "},"JDK.html":{"url":"JDK.html","title":"JDK","keywords":"","body":"JDK Linux 安装JDK分为两种：手动安装和 yum 安装，这里默认使用手动安装 查看是否安装 卸载原生的Java软件环境，如果有请先卸载 java -version rpm -aq | grep java # 卸载开头为Java的安装包 yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64 yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64 ... 省略 ... 下载上传软件 下载链接：https://www.oracle.com/java/technologies/downloads/ 方式一：yum 安装 yum install -y java-1.8.0-openjdk.x86_64 这种方式不需要手动配置环境，直接默认配置，但不够灵活 # 查看JDK版本 java -version 方式二：手动下载 JDK8 download 解压配置 tar -zxvr jdk-8u161-linux-x64.tar.gz -C /usr/local 配置环境变量 编辑 /etc/profile ⽂件，在⽂件尾部加⼊JDK 环境配置 JAVA_HOME=/usr/local/java/jdk1.8.0_161 CLASSPATH=$JAVA_HOME/lib/ PATH=$PATH:$JAVA_HOME/bin export PATH JAVA_HOME CLASSPATH 加载生效配置 source /etc/profile 查看是否成功 java -version # 查看安装位置 which java 如果出现以下，则说明配置成功 配置脚本 请提前下载JDK软件，并上传到Linux里面，这里默认使用方式二 创建shell 脚本 install.sh #! /bin/bash # sh 文件名 jdk文件路径 filename=$1 if [ -z \"$filename\" ]; then echo '尚未指定jdk路径！' exit elif (test ! -e ${filename}) then echo '指定文件不存在，请检查后再试！' exit elif [ ${filename:0-6} == 'tar.gz' ]; then echo '文件未解压，请先解压......' exit elif [ ${filename:0:1} != '/' ]; then echo '请输入绝对路径' exit else echo \"export JAVA_HOME=${filename}\" >> /etc/profile echo \"export PATH=\\${JAVA_HOME}/bin:$PATH\">> /etc/profile echo \"export CLASSPATH=.:\\${JAVA_HOME}/lib/dt.jar:\\${JAVA_HOME}/lib/tools.jar\">> /etc/profile source /etc/profile java -version echo '环境变量配置成功......' fi 赋予权限 chmod 755 install.sh # 生效配置文件 source install.sh 查看是否成功 java -version "},"MySQL.html":{"url":"MySQL.html","title":"MySQL","keywords":"","body":"MySQL安装 单机安装 主要有几种安装方式，yum 安装和源码安装，这里默认使用yum 安装 下载解压 wget https://repo.mysql.com//mysql80-community-release-el8-1.noarch.rpm rpm -ivh mysql80-community-release-el8-1.noarch.rpm yum install mysql-server # 启动 MySQL systemctl start mysqld 配置密码 配置MySQL的用户名和密码 #运行如下脚本文件 设置密码和用户 一直Y mysql_secure_installation 开启授权 # 进入MySQL mysql -uroot -p # 以任何IP数据库授权 mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456'; # 以指定IP数据库授权 mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.232.120' IDENTIFIED BY '123456'; # 刷新特权 mysql> FLUSH PRIVILEGES; 远程访问 firewall-cmd --zone=public --add-port=3306/tcp --permanent firewall-cmd --reload 备份恢复 备份脚本：https://github.com/del-ent/dev-install-doc 主从复制 主数据库出现问题可以切换从数据库，降低单服务器的压力，也可以进行日常备份 搭建集群 同步数据 MySQL数据表以全量和增量的方式向ElasticSearch搜索引擎同步 https://gitee.com/cicadasmile/butte-java-note/blob/master/doc/linux/L08%E3%80%81MySQL%E5%90%8C%E6%AD%A5ES%E6%95%B0%E6%8D%AE.md "},"Redis.html":{"url":"Redis.html","title":"Redis","keywords":"","body":"Redis 安装 单机安装 下载解压 wget http://download.redis.io/releases/redis-4.0.2.tar.gz # 下载GCC yum install gcc-c++ # 解压到指定目录 tar -zxvf redis-4.0.2.tar.gz -C /usr/local # 安装指定目录 cd /usr/local/redis-4.0.2 make install PREFIX=/usr/local/redis-4.0.2 修改配置 vim /etc/redis.conf # 找到 bind 127.0.0.1，加上你的白名单IP，设置成 0.0.0.0 或者屏蔽都表示默认允许所有IP连接 # bind 127.0.0.1 # 找到 port 6379 这个为redis端口，根据需要修改 port 6379 # 修改以下配置为 yes,以守护进程的方式运行，就是关闭了远程连接窗口，redis依然运行 daemonize yes # 修改 protected-mode 模式为no protected-mode no # 设置密码，默认是注释了的 requirepass password 服务启动 #指定配置文件启动(前台启动) bin/redis-server ./redis.conf #指定配置文件启动(后台启动) bin/redis-server& ./redis.conf 查看Redis 是否进行 ps -aux | grep redis # 端口监听查看方式 netstat -lanp | grep 6379 连接Redis # 远程连接 ./bin/redis-cli -h 192.168.232.75 -p 6379 # 本地连接 ./bin/redis-cli -a root@123 # 关闭Redis ./bin/redis-cli shutdown 打开防火墙 #开启指定端口 firewall-cmd --zone=public --add-port=6379/tcp --permanent # 重启防火墙 firewall-cmd --reload 搭建集群 哨兵模式 https://gitee.com/cicadasmile/butte-java-note/blob/master/doc/linux/L04%E3%80%81Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.md 192.168.72.129 主服务 192.168.72.130 从服务 192.168.72.131 从服务 配置服务 配置主服务 配置从服务 配置 "},"Tomcat.html":{"url":"Tomcat.html","title":"Tomcat","keywords":"","body":"Tomcat 安装 下载解压 wegt https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.22/bin/apache-tomcat-10.0.22.tar.gz tar -zxvf apache-tomcat-10.0.21.tar.gz -C /usr/local 启动服务 cd /usr/local/apache-tomcat-8.5.27/ ./bin/startup.sh 开启端口 # 开启8080端口 firewall-cmd --zone=public --add-port=8080/tcp --permanent # 重启端口生效 systemctl restart firewalld 验证成功 "},"Nginx.html":{"url":"Nginx.html","title":"Nginx","keywords":"","body":"Nginx 安装 Nginx 安装有两种方式，yum 安装和源码安装，这里使用源码安装 单机安装 下载解压 # 安装必要扩展 yum install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel # 下载 wget http://nginx.org/download/nginx-1.18.0.tar.gz # 解压 tar -zxvf nginx-1.18.0.tar.gz -C /usr/local 配置文件 # 进入安装目录 cd /usr/local/nginx-1.18.0/ # 设置用户和组安装目录和新增SSL模块 ./configure \\ --user=nginx \\ --group=nginx \\ --prefix=/usr/local/nginx-1.18.0 \\ --with-http_stub_status_module \\ --with-http_ssl_module \\ --with-http_realip_module \\ --with-http_gzip_static_module 编译安装 # 编译 && 安装，默认安装位置 /usr/local/nginx make make && install 服务启动 # 查看版本 /usr/local/nginx/sbin/nginx -v # 启动 /usr/local/nginx/sbin/nginx # 重新载入配置文件 /usr/local/nginx/sbin/nginx -s reload # 快速关闭 Nginx /usr/local/nginx/sbin/nginx -s stop # 启动 systemctl start nginx 设置开机启动 systemctl enable nginx 环境变量 简化命令，将软件启动路径添加到环境变量里 vi /etc/profile # 添加Nginx的安装路径 PATH=$PATH:/usr/local/nginx/sbin export PATH 开放端口 # 开启80端口 firewall-cmd --zone=public --add-port=80/tcp --permanent # 重启端口生效 systemctl restart firewalld 验证成功 打开浏览器输入地址：http://192.168.32.132 搭建高可用 安装 yum -y install keepalived keepalived -v 修改配置 https://github.com/del-ent/dev-install-doc/blob/master/Nginx%2BKeepalived.md vim /etc/keepalived/keepalived.conf vrrp_script chk_nginx { script \"/etc/keepalived/nginx_check.sh\" # 检测nginx状态的脚本路径 interval 2 # 检测时间间隔2s weight -20 # 如果脚本的条件成立，权重-20 } vrrp_instance VI_1 { state MASTER # 服务状态；MASTER（工作状态）BACKUP（备用状态） interface eth0 # VIP绑定网卡 virtual_router_id 51 # 虚拟路由ID，主、备节点必须一致 mcast_src_ip 192.168.1.191 # 本机IP nopreempt # 优先级高的设置，解决异常回复后再次抢占的问题 priority 100 # 优先级；取值范围：0~254；MASTER > BACKUP advert_int 1 # 组播信息发送间隔，主、备节点必须一致，默认1s authentication { # 验证信息；主、备节点必须一致 auth_type PASS # VRRP验证类型，PASS、AH两种 auth_pass 1111 # VRRP验证密码，在同一个vrrp_instance下，主、从必须使用相同的密码才能正常通信 } track_script { # 将track_script块加入instance配置块 chk_nginx # 执行Nginx监控的服务 } virtual_ipaddress { # 虚拟IP池，主、备节点必须一致，可以定义多个VIP 192.168.1.99 # 虚拟IP } } 启动服务 # 开机启动 chkconfig keepalived on # 启动服务 service keepalived start "},"Maven.html":{"url":"Maven.html","title":"Maven","keywords":"","body":"Maven 下载安装 官网下载：https://archive.apache.org/dist/maven/maven-3/ wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.6.3-bin.tar.gz # 解压安装 tar -zxvf apache-maven-3.6.3-bin.tar.gz -C /usr/local 配置环境 修改配置环境变量 vi /etc/profile export MAVEN_HOME=/usr/local/apache-maven-3.6.3 export PATH=$PATH:$MAVEN_HOME/bin 刷新生效 source /etc/profile # 验证是否成功 mvn -v 配置仓库 配置Maven本地仓库 # 进入安装路径并添加仓库保存地址 cd /usr/local/apache-maven-3.6.3 mkdir -p .m2/repository 修改配置文件：vi conf/setting.xml # 添加本地仓库路径 /usr/local/apache-maven-3.5.4/.m2/repository # 添加阿里云镜像仓库 alimaven aliyun maven http://maven.aliyun.com/nexus/content/groups/public/ central 创建脚本 创建 install_maven.sh 脚本 #!/bin/bash # 定义要安装的 Maven 版本 MAVEN_VERSION=\"3.6.3\" # 定义安装目录 INSTALL_DIR=\"/opt\" cd ${INSTALL_DIR} # 下载并解压 Maven wget \"https://downloads.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz\" tar -vf apache-maven-${MAVEN_VERSION}-bin.tar.gz # 移动 Maven 到安装目录 mv apache-maven-${MAVEN_VERSION} maven # 配置环境变量 echo \"export PATH=${INSTALL_DIR}/maven/bin:$PATH\" | tee /etc/profile.d/maven.sh source /etc/profile.d/maven.sh # 验证安装 mvn --version echo \"clear temp\" rm -rf apache-maven-${MAVEN_VERSION}-bin.tar.gz 执行脚本 chmod +x install_maven.sh ./install_maven.sh "},"Gitlab.html":{"url":"Gitlab.html","title":"Gitlab","keywords":"","body":"Gitlab 安装 Git安装 如果想使用Gitlab,，请提前安装Git Gitlab安装 gitlab实现项目自动发布的功能 安装依赖 wget http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-11.6.10-ce.0.el7.x86_64.rpm chmod 777 gitlab-ce-11.6.10-ce.0.el7.x86_64.rpm rpm -ivh gitlab-ce-11.6.10-ce.0.el7.x86_64.rpm # 安装相关依赖 yum -y install policycoreutils-python 修改配置 修改配置文件：vi /etc/gitlab/gitlab.rb external_url 'http://192.168.31.32:8083/gitlab' unicorn['port'] = 8083 重启服务 # 重启配置 gitlab-ctl reconfigure gitlab-ctl restart gitlab-ctl status 开放测试 systemctl stop firewalld.service 浏览器输入IP地址访问：http://192.168.31.32:8083/gitlab 第一次进入后会出现修改密码的页面，其默认用户为 root [!danger] 可能因为内存swap空间不足，导致502错误，解决办法增加swap 空间或者增加虚拟机的内存空间 配置密钥 # 添加用户名和邮箱 $ git config --global user.name \"[name]\" $ git config --global user.email \"[email address]\" # 生成密钥 ssh-keygen -t rsa -C \"your_email@youremail.com\" cat ~/.ssh/id_rsa.pub Gitlab 添加密钥 点击头像 -> Settings -> SSH keys 添加公钥 配置邮箱 配置邮箱发送邮件，修改配置文件：vim /etc/gitlab/gitlab.rb gitlab_rails['smtp_enable'] = true gitlab_rails['smtp_address'] = \"smtp.qq.com\" gitlab_rails['smtp_port'] = 465 gitlab_rails['smtp_user_name'] = \"你的QQ号@qq.com\" gitlab_rails['smtp_password'] = \"QQ邮箱授权码\" gitlab_rails['smtp_domain'] = \"smtp.qq.com\" gitlab_rails['smtp_authentication'] = \"login\" gitlab_rails['smtp_enable_starttls_auto'] = true gitlab_rails['smtp_tls'] = true gitlab_rails['gitlab_email_from'] = \"你的QQ号@qq.com\" 刷新配置文件 gitlab-rails console Notify.test_email('你的QQ号@qq.com', '邮件主题', '邮件内容').deliver_now 查看邮件 SMTP#qq-exmail "},"Node.html":{"url":"Node.html","title":"Node","keywords":"","body":"Node 安装 下载解压 官网下载：https://nodejs.org/en/download/releases/ 获取下载地址 wget https://nodejs.org/dist/v10.9.0/node-v12.20.2-linux-x64.tar.xz tar xf node-v12.20.2-linux-x64.tar.xz -C /usr/local 配置环境 vi ~/.bash_profile # 导入Node安装路径 export PATH=/usr/local/node-v12.20.2-linux-x64/bin:$PATH 刷新环境变量 source ~/.bash_profile 验证Node node -v npm version 加速Npm 使用淘宝的cnpm npm install cnpm -g --registry=https://registry.npm.taobao.org "}}